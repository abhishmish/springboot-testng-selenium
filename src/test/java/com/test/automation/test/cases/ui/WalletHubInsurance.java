package com.test.automation.test.cases.ui;

import org.openqa.selenium.WebDriver;
import org.springframework.beans.factory.annotation.Autowired;
import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;
import com.test.automation.common.*;
import com.test.automation.page.component.wallethub.WalletHubInsurancePageReviewComponent;
import com.test.automation.page.component.wallethub.WalletHubSignupPageComponent;
import com.test.automation.test.util.AbstractBaseTest;

public class WalletHubInsurance extends AbstractBaseTest {
     
	@Autowired
	private WebDriver driver;
	
	@Autowired
	private WalletHubSignupPageComponent walletHubSignupPage;
	
	@Autowired
	private WalletHubInsurancePageReviewComponent walletHubReviewPage;
	
	@Autowired
	private ConfigProperties configProps;
	
	@Autowired
	private UserAction userAction;
	
	private long waitTime;
	
	@BeforeMethod
	public void testSetup() {		
		waitTime = (long)AppConstants.TIME_OUT.getValue();
	}
    
	@Test(priority = 0)
    public void signupWalletHub() {
		this.walletHubSignupPage.setDriver(this.driver);
		this.userAction.launchUrl(this.driver, this.configProps.getProperty("wallethub.application.signup.url").trim());
		
		this.userAction.waitForElementToVisible(walletHubSignupPage.getJoinButton(), this.waitTime, "Join Button");
		
		//Can write the logic to generate unique email id so that the signup process can be done. A unique email id can be generated by using timestamp.
		this.walletHubSignupPage.signup(this.configProps.getProperty("wallethub.signup.email").trim(), 
										this.configProps.getProperty("wallethub.signup.password").trim(), 
										Boolean.valueOf(this.configProps.getProperty("wallethub.signup.get-report").trim()));
		
		Assert.assertEquals(this.walletHubSignupPage.getSignupSuccessMessageHeader().getText().trim(), 
							this.configProps.getProperty("wallethub.signup.success.message"));
    }
	
	@Test(priority = 1)
	public void postReviewComment() {
		this.walletHubReviewPage.setDriver(this.driver);
		this.userAction.launchUrl(this.driver, this.configProps.getProperty("wallethub.application.review.url").trim());
		this.userAction.waitForElementToVisible(this.walletHubReviewPage.getReviewsLink(), this.waitTime, "Reviews Link");
		this.userAction.click(this.walletHubReviewPage.getReviewsLink(), "Reviews Link");
		
		Assert.assertEquals(this.walletHubReviewPage.getRatingSection().isDisplayed(), true);
		
		//verify that stars are not up by default
		Assert.assertEquals(this.walletHubReviewPage.getRatedStars().size(), 0);
				
		int rating = Integer.valueOf(this.configProps.getProperty("wallethub.policy.review.rating").trim());
		this.userAction.mouseHover(this.driver, this.walletHubReviewPage.getRatingStars().get(rating-1));
		
		Assert.assertEquals(this.walletHubReviewPage.getRatedStars().size(), rating);	
		
		this.userAction.click(this.walletHubReviewPage.getRatingStars().get(rating-1), rating + "Star Rating");
		
		this.userAction.waitForElementToVisible(this.walletHubReviewPage.getPolicyDropdown(), this.waitTime, "Policy Dropdown");
		
		//verify the selected rating
		Assert.assertEquals(this.walletHubReviewPage.getRatedStars().size(), rating);
		
		this.walletHubReviewPage.submitReview(this.configProps.getProperty("wallethub.policy.health.insurance").trim(), 
												this.configProps.getProperty("wallethub.policy.review.comment").trim());
	}
	
	@AfterMethod
	public void finishTest() {
		this.driver.quit();
	}
}
